from multiprocessing import Pool, cpu_count
from timeit import default_timer


def factorize(number):
    dividers = []
    for i in range(1, int(number/2) + 1):
        if number % i == 0:
            dividers.append(i)
    dividers.append(number)
    return dividers


def factorize_sync(numbers):
    return [factorize(number) for number in numbers]


def factorize_async(numbers):
    with Pool(cpu_count()) as pool:
        result = pool.map(factorize, numbers)
    return result


if __name__ == "__main__":
    test_numbers = [128, 255, 99999, 10651060]

    start = default_timer()
    factorize_sync(test_numbers)
    elapsed_sync = default_timer() - start

    start = default_timer()
    factorize_async(test_numbers)
    elapsed_async = default_timer() - start


    test_numbers = [128, 255, 99999, 10651060]


    results_sync = factorize_sync(test_numbers)
    assert results_sync[0] == [1, 2, 4, 8, 16, 32, 64, 128]
    assert results_sync[1] == [1, 3, 5, 15, 17, 51, 85, 255]
    assert results_sync[2] == [1, 3, 9, 41, 123, 271, 369, 813, 2439, 11111, 33333, 99999]
    assert results_sync[3] == [1, 2, 4, 5, 7, 10, 14, 20, 28, 35, 70, 140, 76079, 152158, 304316, 380395, 532553, 760790, 1065106, 1521580, 2130212, 2662765, 5325530, 10651060]


    results_async = factorize_async(test_numbers)
    assert results_async[0] == [1, 2, 4, 8, 16, 32, 64, 128]
    assert results_async[1] == [1, 3, 5, 15, 17, 51, 85, 255]
    assert results_async[2] == [1, 3, 9, 41, 123, 271, 369, 813, 2439, 11111, 33333, 99999]
    assert results_async[3] == [1, 2, 4, 5, 7, 10, 14, 20, 28, 35, 70, 140, 76079, 152158, 304316, 380395, 532553, 760790, 1065106, 1521580, 2130212, 2662765, 5325530, 10651060]

    print(f"Elapsed time of synchronous done function is {elapsed_sync} seconds")
    print(f"Elapsed time of asynchronous done function is {elapsed_async} seconds")
